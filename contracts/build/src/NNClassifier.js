var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Field, SmartContract, state, State, method, Provable, Poseidon, } from 'o1js';
import { floatToFixedQ1616, fixedQ1616ToFloat } from './helper.js';
import { nnClassifier } from './modelGen.js';
import * as mathjs from 'mathjs';
export class NNClassifier extends SmartContract {
    constructor() {
        super(...arguments);
        this.result = State();
        this.probability = State();
        this.outputHash = State();
        this.allHashes = State();
    }
    init() {
        super.init();
        this.result.set(Field(0));
        this.probability.set(Field(0));
        this.outputHash.set(Field(0));
        this.allHashes.set(Field(0));
    }
    feedforward(in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11, in12, in13, in14, in15, in16, in17, in18, in19, in20, in21, in22, in23, in24, in25, in26, in27, in28, in29, in30, in31, in32, in33, in34, in35, in36, in37, in38, in39, in40, in41, in42, in43, in44, in45, in46, in47, in48, in49, in50, in51, in52, in53, in54, in55, in56, in57, in58, in59, in60, in61, in62, in63, in64, in65, in66, in67, in68, in69, in70, in71, in72, in73, in74, in75, in76, in77, in78, in79, in80, in81, in82, in83, in84, in85, in86, in87, in88, in89, in90, in91, in92, in93, in94, in95, in96, in97, in98, in99, in100, in101, in102, in103, in104, in105, in106, in107, in108, in109, in110, in111, in112, in113, in114, in115, in116, in117, in118, in119, in120, in121, in122, in123, in124, in125, in126, in127, in128, in129, in130, in131, in132, in133, in134, in135, in136, in137, in138, in139, in140, in141, in142, in143, in144, in145, in146, in147, in148, in149, in150, in151, in152, in153, in154, in155, in156, in157, in158, in159, in160, in161, in162, in163, in164, in165, in166, in167, in168, in169, in170, in171, in172, in173, in174, in175, in176, in177, in178, in179, in180, in181, in182, in183, in184, in185, in186, in187, in188, in189, in190, in191, in192, in193, in194, in195, in196) {
        const currentState1 = this.result.getAndAssertEquals();
        const currentState2 = this.probability.getAndAssertEquals();
        const currentState3 = this.outputHash.getAndAssertEquals();
        const currentState4 = this.allHashes.getAndAssertEquals();
        // const inputBigInt = secretInput.toBigInt();
        // Provable.log(inputBigInt.toString());
        Provable.asProver(() => {
            const inputBigInts = [
                in1.toBigInt(),
                in2.toBigInt(),
                in3.toBigInt(),
                in4.toBigInt(),
                in5.toBigInt(),
                in6.toBigInt(),
                in7.toBigInt(),
                in8.toBigInt(),
                in9.toBigInt(),
                in10.toBigInt(),
                in11.toBigInt(),
                in12.toBigInt(),
                in13.toBigInt(),
                in14.toBigInt(),
                in15.toBigInt(),
                in16.toBigInt(),
                in17.toBigInt(),
                in18.toBigInt(),
                in19.toBigInt(),
                in20.toBigInt(),
                in21.toBigInt(),
                in22.toBigInt(),
                in23.toBigInt(),
                in24.toBigInt(),
                in25.toBigInt(),
                in26.toBigInt(),
                in27.toBigInt(),
                in28.toBigInt(),
                in29.toBigInt(),
                in30.toBigInt(),
                in31.toBigInt(),
                in32.toBigInt(),
                in33.toBigInt(),
                in34.toBigInt(),
                in35.toBigInt(),
                in36.toBigInt(),
                in37.toBigInt(),
                in38.toBigInt(),
                in39.toBigInt(),
                in40.toBigInt(),
                in41.toBigInt(),
                in42.toBigInt(),
                in43.toBigInt(),
                in44.toBigInt(),
                in45.toBigInt(),
                in46.toBigInt(),
                in47.toBigInt(),
                in48.toBigInt(),
                in49.toBigInt(),
                in50.toBigInt(),
                in51.toBigInt(),
                in52.toBigInt(),
                in53.toBigInt(),
                in54.toBigInt(),
                in55.toBigInt(),
                in56.toBigInt(),
                in57.toBigInt(),
                in58.toBigInt(),
                in59.toBigInt(),
                in60.toBigInt(),
                in61.toBigInt(),
                in62.toBigInt(),
                in63.toBigInt(),
                in64.toBigInt(),
                in65.toBigInt(),
                in66.toBigInt(),
                in67.toBigInt(),
                in68.toBigInt(),
                in69.toBigInt(),
                in70.toBigInt(),
                in71.toBigInt(),
                in72.toBigInt(),
                in73.toBigInt(),
                in74.toBigInt(),
                in75.toBigInt(),
                in76.toBigInt(),
                in77.toBigInt(),
                in78.toBigInt(),
                in79.toBigInt(),
                in80.toBigInt(),
                in81.toBigInt(),
                in82.toBigInt(),
                in83.toBigInt(),
                in84.toBigInt(),
                in85.toBigInt(),
                in86.toBigInt(),
                in87.toBigInt(),
                in88.toBigInt(),
                in89.toBigInt(),
                in90.toBigInt(),
                in91.toBigInt(),
                in92.toBigInt(),
                in93.toBigInt(),
                in94.toBigInt(),
                in95.toBigInt(),
                in96.toBigInt(),
                in97.toBigInt(),
                in98.toBigInt(),
                in99.toBigInt(),
                in100.toBigInt(),
                in101.toBigInt(),
                in102.toBigInt(),
                in103.toBigInt(),
                in104.toBigInt(),
                in105.toBigInt(),
                in106.toBigInt(),
                in107.toBigInt(),
                in108.toBigInt(),
                in109.toBigInt(),
                in110.toBigInt(),
                in111.toBigInt(),
                in112.toBigInt(),
                in113.toBigInt(),
                in114.toBigInt(),
                in115.toBigInt(),
                in116.toBigInt(),
                in117.toBigInt(),
                in118.toBigInt(),
                in119.toBigInt(),
                in120.toBigInt(),
                in121.toBigInt(),
                in122.toBigInt(),
                in123.toBigInt(),
                in124.toBigInt(),
                in125.toBigInt(),
                in126.toBigInt(),
                in127.toBigInt(),
                in128.toBigInt(),
                in129.toBigInt(),
                in130.toBigInt(),
                in131.toBigInt(),
                in132.toBigInt(),
                in133.toBigInt(),
                in134.toBigInt(),
                in135.toBigInt(),
                in136.toBigInt(),
                in137.toBigInt(),
                in138.toBigInt(),
                in139.toBigInt(),
                in140.toBigInt(),
                in141.toBigInt(),
                in142.toBigInt(),
                in143.toBigInt(),
                in144.toBigInt(),
                in145.toBigInt(),
                in146.toBigInt(),
                in147.toBigInt(),
                in148.toBigInt(),
                in149.toBigInt(),
                in150.toBigInt(),
                in151.toBigInt(),
                in152.toBigInt(),
                in153.toBigInt(),
                in154.toBigInt(),
                in155.toBigInt(),
                in156.toBigInt(),
                in157.toBigInt(),
                in158.toBigInt(),
                in159.toBigInt(),
                in160.toBigInt(),
                in161.toBigInt(),
                in162.toBigInt(),
                in163.toBigInt(),
                in164.toBigInt(),
                in165.toBigInt(),
                in166.toBigInt(),
                in167.toBigInt(),
                in168.toBigInt(),
                in169.toBigInt(),
                in170.toBigInt(),
                in171.toBigInt(),
                in172.toBigInt(),
                in173.toBigInt(),
                in174.toBigInt(),
                in175.toBigInt(),
                in176.toBigInt(),
                in177.toBigInt(),
                in178.toBigInt(),
                in179.toBigInt(),
                in180.toBigInt(),
                in181.toBigInt(),
                in182.toBigInt(),
                in183.toBigInt(),
                in184.toBigInt(),
                in185.toBigInt(),
                in186.toBigInt(),
                in187.toBigInt(),
                in188.toBigInt(),
                in189.toBigInt(),
                in190.toBigInt(),
                in191.toBigInt(),
                in192.toBigInt(),
                in193.toBigInt(),
                in194.toBigInt(),
                in195.toBigInt(),
                in196.toBigInt(),
            ];
            // const inputBigInts = secretInput.map((x) => x.toBigInt());
            const inputFloats = inputBigInts.map((x) => fixedQ1616ToFloat(Number(x.toString())));
            // Provable.log(inputFloats[0].toString());
            const inputMatrix = mathjs.matrix(inputFloats);
            const [output, maxIndex, probability] = nnClassifier(inputMatrix);
            const outputArray = output.valueOf();
            const outputArrayField = outputArray.map((x) => Field(floatToFixedQ1616(x)));
            this.outputHash.set(Poseidon.hash(outputArrayField));
            Provable.log(output.toString());
            let maxIndexFP;
            let probabilityFP;
            if (typeof maxIndex === 'number' && typeof probability === 'number') {
                maxIndexFP = floatToFixedQ1616(maxIndex);
                probabilityFP = floatToFixedQ1616(probability);
            }
            if (maxIndexFP && probabilityFP) {
                const maxIndexFPBigInt = BigInt(maxIndexFP);
                const maxIndexFPField = Field(maxIndexFPBigInt);
                this.result.set(maxIndexFPField);
                const probabilityFPBigInt = BigInt(probabilityFP);
                const probabilityFPField = Field(probabilityFPBigInt);
                this.probability.set(probabilityFPField);
            }
        });
    }
    createMLProof(in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11, in12, in13, in14, in15, in16, in17, in18, in19, in20, in21, in22, in23, in24, in25, in26, in27, in28, in29, in30, in31, in32, in33, in34, in35, in36, in37, in38, in39, in40, in41, in42, in43, in44, in45, in46, in47, in48, in49, in50, in51, in52, in53, in54, in55, in56, in57, in58, in59, in60, in61, in62, in63, in64, in65, in66, in67, in68, in69, in70, in71, in72, in73, in74, in75, in76, in77, in78, in79, in80, in81, in82, in83, in84, in85, in86, in87, in88, in89, in90, in91, in92, in93, in94, in95, in96, in97, in98, in99, in100, in101, in102, in103, in104, in105, in106, in107, in108, in109, in110, in111, in112, in113, in114, in115, in116, in117, in118, in119, in120, in121, in122, in123, in124, in125, in126, in127, in128, in129, in130, in131, in132, in133, in134, in135, in136, in137, in138, in139, in140, in141, in142, in143, in144, in145, in146, in147, in148, in149, in150, in151, in152, in153, in154, in155, in156, in157, in158, in159, in160, in161, in162, in163, in164, in165, in166, in167, in168, in169, in170, in171, in172, in173, in174, in175, in176, in177, in178, in179, in180, in181, in182, in183, in184, in185, in186, in187, in188, in189, in190, in191, in192, in193, in194, in195, in196, outputHash) {
        const currentState1 = this.result.getAndAssertEquals();
        const currentState2 = this.probability.getAndAssertEquals();
        const currentState3 = this.outputHash.getAndAssertEquals();
        const currentState4 = this.allHashes.getAndAssertEquals();
        const inputHash = Poseidon.hash([
            in1,
            in2,
            in3,
            in4,
            in5,
            in6,
            in7,
            in8,
            in9,
            in10,
            in11,
            in12,
            in13,
            in14,
            in15,
            in16,
            in17,
            in18,
            in19,
            in20,
            in21,
            in22,
            in23,
            in24,
            in25,
            in26,
            in27,
            in28,
            in29,
            in30,
            in31,
            in32,
            in33,
            in34,
            in35,
            in36,
            in37,
            in38,
            in39,
            in40,
            in41,
            in42,
            in43,
            in44,
            in45,
            in46,
            in47,
            in48,
            in49,
            in50,
            in51,
            in52,
            in53,
            in54,
            in55,
            in56,
            in57,
            in58,
            in59,
            in60,
            in61,
            in62,
            in63,
            in64,
            in65,
            in66,
            in67,
            in68,
            in69,
            in70,
            in71,
            in72,
            in73,
            in74,
            in75,
            in76,
            in77,
            in78,
            in79,
            in80,
            in81,
            in82,
            in83,
            in84,
            in85,
            in86,
            in87,
            in88,
            in89,
            in90,
            in91,
            in92,
            in93,
            in94,
            in95,
            in96,
            in97,
            in98,
            in99,
            in100,
            in101,
            in102,
            in103,
            in104,
            in105,
            in106,
            in107,
            in108,
            in109,
            in110,
            in111,
            in112,
            in113,
            in114,
            in115,
            in116,
            in117,
            in118,
            in119,
            in120,
            in121,
            in122,
            in123,
            in124,
            in125,
            in126,
            in127,
            in128,
            in129,
            in130,
            in131,
            in132,
            in133,
            in134,
            in135,
            in136,
            in137,
            in138,
            in139,
            in140,
            in141,
            in142,
            in143,
            in144,
            in145,
            in146,
            in147,
            in148,
            in149,
            in150,
            in151,
            in152,
            in153,
            in154,
            in155,
            in156,
            in157,
            in158,
            in159,
            in160,
            in161,
            in162,
            in163,
            in164,
            in165,
            in166,
            in167,
            in168,
            in169,
            in170,
            in171,
            in172,
            in173,
            in174,
            in175,
            in176,
            in177,
            in178,
            in179,
            in180,
            in181,
            in182,
            in183,
            in184,
            in185,
            in186,
            in187,
            in188,
            in189,
            in190,
            in191,
            in192,
            in193,
            in194,
            in195,
            in196,
        ]);
        const allHashes = Poseidon.hash([inputHash, outputHash]);
        this.allHashes.set(allHashes);
    }
    verifyMLProof(inputHash, outputHash) {
        const currentState1 = this.result.getAndAssertEquals();
        const currentState2 = this.probability.getAndAssertEquals();
        const currentState3 = this.outputHash.getAndAssertEquals();
        const currentState4 = this.allHashes.getAndAssertEquals();
        const allHashes = Poseidon.hash([inputHash, outputHash]);
        allHashes.assertEquals(currentState4);
    }
}
__decorate([
    state(Field),
    __metadata("design:type", Object)
], NNClassifier.prototype, "result", void 0);
__decorate([
    state(Field),
    __metadata("design:type", Object)
], NNClassifier.prototype, "probability", void 0);
__decorate([
    state(Field),
    __metadata("design:type", Object)
], NNClassifier.prototype, "outputHash", void 0);
__decorate([
    state(Field),
    __metadata("design:type", Object)
], NNClassifier.prototype, "allHashes", void 0);
__decorate([
    method,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field]),
    __metadata("design:returntype", void 0)
], NNClassifier.prototype, "feedforward", null);
__decorate([
    method,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field,
        Field]),
    __metadata("design:returntype", void 0)
], NNClassifier.prototype, "createMLProof", null);
__decorate([
    method,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Field,
        Field]),
    __metadata("design:returntype", void 0)
], NNClassifier.prototype, "verifyMLProof", null);
//# sourceMappingURL=NNClassifier.js.map